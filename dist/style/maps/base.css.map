{"version":3,"sources":["base.css","base.scss","_variable/_variable.scss","_mixin/_mixin.scss"],"names":[],"mappings":"AAAA,wDAAwD;ACSxD;;EAEE,YC2BgB;ED1BhB,aC0BgB;CDzBjB;;ADND,wDAAwD;ACOxD;EACE,iBCuBgB;EDtBhB,uCCewC;CDdzC;;ADJD,wDAAwD;ACKxD;GACE,QAAS;CAaV;;ADdD,wDAAwD;ACAxD;EAII,YAAY;CACb;;ADAH,wDAAwD;ACLxD;EASI,iBAAiB;EACjB,eAAe;EACf,UAAU;EACV,mBAAmB;CACpB;;ADAH,wDAAwD;ACExD;EAEI,gBCGc;EDFd,aAAa;CACd;;ADAH,wDAAwD;ACKxD;EACE,mBAAmB;EACnB,mBACa;EADb,oBAEc;EAEd,kBACa;EADb,mBAEc;CAMf;;AEqKC;EH9KA,wDAAwD;ECL1D;IAWI,kBAAkB;IAClB,YChBc;GDkBjB;CDJA;;AAED,wDAAwD;ACMxD;EACE,4CAAY;EAAZ,oCAAY;EACZ,gDAAgB;EAAhB,wCAAgB;EAChB,0BCzC2B;ED0C3B,mDAAqB;EACrB,+BAAuB;UAAvB,uBAAuB;EACvB,gCAAgC;CACjC","file":"../base.css","sourcesContent":["/* line 10, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\nbody,\nhtml {\n  width: 100%;\n  height: 100%;\n}\n\n/* line 15, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\nbody {\n  min-height: 100%;\n  font-family: \"proximanovasoft-regular\";\n}\n\n/* line 19, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\n.clearfix {\n  *zoom: 1;\n}\n\n/* line 22, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\n.clearfix:after {\n  clear: both;\n}\n\n/* line 26, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\n.clearfix:before, .clearfix:after {\n  content: \"\\0020\";\n  display: block;\n  height: 0;\n  visibility: hidden;\n}\n\n/* line 35, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\n.img_responsive {\n  max-width: 100%;\n  height: auto;\n}\n\n/* line 43, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\n.container_fluid {\n  position: relative;\n  padding-left: 15px;\n  padding-right: 15px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n@media screen and (min-width: 1200px) {\n  /* line 43, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\n  .container_fluid {\n    max-width: 1400px;\n    width: 100%;\n  }\n}\n\n/* line 61, C:/WORK/PROJECT/EC_new/src/scss/base.scss */\n.main {\n  height: calc(100% - (102px + 71px));\n  min-height: calc(100% - (102px + 71px));\n  background-color: #315477;\n  background-image: url(\"../image/img-login-bg.png\");\n  background-size: cover;\n  background-position: top center;\n}\n","///\r\n/// IMPORT FILES\r\n///\r\n@import \"./_mixin/mixin\";\r\n@import \"./_variable/variable\";\r\n@import \"./_variable/sprite\";\r\n///\r\n///\r\n///\r\nbody,\r\nhtml {\r\n  width: $w-all;\r\n  height: $w-all;\r\n}\r\nbody {\r\n  min-height: $w-all;\r\n  font-family: $PNS-regular;\r\n}\r\n.clearfix {\r\n  *zoom: 1;\r\n\r\n  &:after {\r\n    clear: both;\r\n  }\r\n\r\n  &:before,\r\n  &:after {\r\n    content: \"\\0020\";\r\n    display: block;\r\n    height: 0;\r\n    visibility: hidden;\r\n  }\r\n}\r\n.img {\r\n  &_responsive {\r\n    max-width: $w-all;\r\n    height: auto;\r\n  }\r\n}\r\n///\r\n///\r\n///\r\n.container_fluid {\r\n  position: relative;\r\n  padding: {\r\n    left: 15px;\r\n    right: 15px;\r\n  };\r\n  margin: {\r\n    left: auto;\r\n    right: auto;\r\n  };\r\n  @include respond-to(extra-large) {\r\n    max-width: 1400px;\r\n    width: $w-all;\r\n  }\r\n}\r\n///\r\n///\r\n///\r\n.main {\r\n  height: calc(100% - (102px + 71px));\r\n  min-height: calc(100% - (102px + 71px));\r\n  background-color: $c-venice-blue;\r\n  background-image: url(\"../image/img-login-bg.png\");\r\n  background-size: cover;\r\n  background-position: top center;\r\n}\r\n///\r\n///\r\n///\r\n","@import \"../_function/function\";\r\n\r\n////\r\n/// @group  Variable\r\n////\r\n\r\n///\r\n/// @name   object\r\n///\r\n\r\n// Open Sans - OS\r\n// Proxima Nova Soft - PNS\r\n\r\n$object : (\r\n\tcolor : (\r\n\t\twhite             : #FFF,\r\n\t\tblack             : #000,\r\n\t\tnero              : #191919,\r\n\t\tlight-grey        : #d5d5d5,\r\n\t\tazure\t\t      : #f5f6f6,\r\n\t\taqua\t\t      : #00e4ff,\r\n\t\tprussian-blue     : #03325f,\r\n\t\tvenice-blue       : #315477\r\n\t),\r\n\r\n\tfonts : (\r\n\t\tOS-regular\t\t: \"opensans-regular\",\r\n\t\tOS-light\t\t: \"opensans-light\",\r\n\t\tOS-bold\t\t\t: \"opensans-bold\",\r\n\t\tOS-semibold\t\t: \"opensans-semibold\",\r\n\t\tOS-extrabold\t: \"opensans-extrabold\",\r\n\t\tPNS-regular\t\t: \"proximanovasoft-regular\",\r\n\t\tPNS-medium\t\t: \"proximanovasoft-medium\",\r\n\t\tPNS-bold\t\t: \"proximanovasoft-bold\",\r\n\t\tPNS-semibold\t: \"proximanovasoft-semibold\"\r\n\t),\r\n\r\n\tdimension : (\r\n\t\tall       : 100%\r\n\t),\r\n);\r\n\r\n$w-all              : return-value(dimension, all);\r\n\r\n$c-white            : return-value(color, white);\r\n$c-black            : return-value(color, black);\r\n$c-nero             : return-value(color, nero);\r\n$c-light-grey       : return-value(color, light-grey);\r\n$c-azure\t        : return-value(color, azure);\r\n$c-aqua\t\t        : return-value(color, aqua);\r\n$c-prussian-blue    : return-value(color, prussian-blue);\r\n$c-venice-blue\t    : return-value(color, venice-blue);\r\n\r\n$OS-regular\t\t\t: return-value(fonts, OS-regular);\r\n$OS-light\t\t\t: return-value(fonts, OS-light);\r\n$OS-bold\t\t\t: return-value(fonts, OS-bold);\r\n$OS-semibold\t\t: return-value(fonts, OS-semibold);\r\n$OS-extrabold\t\t: return-value(fonts, OS-extrabold);\r\n$PNS-regular\t\t: return-value(fonts, PNS-regular);\r\n$PNS-medium\t\t\t: return-value(fonts, PNS-medium);\r\n$PNS-bold\t\t\t: return-value(fonts, PNS-bold);\r\n$PNS-semibold\t\t: return-value(fonts, PNS-semibold);","////\r\n/// @group  Mixin\r\n////\r\n\r\n/// \r\n/// Mixin setting the width and height element.\r\n///\r\n/// @name   mixinDimensions\r\n///\r\n/// @param  {String}  $width             - The width property sets the width of an element.\r\n/// @param  {String}  $height  [$width]  - The height property sets the height of an element.\r\n///\r\n/// @see    $object\r\n///\r\n/// @example\r\n///   <selector> {\r\n///     @include mixinDimensions(100%);\r\n///     @include mixinDimensions(100%, 50%);\r\n///   }\r\n///\r\n@mixin mixinDimensions($width, $height:$width) {\r\n  width : $width;\r\n  height: $height;\r\n}\r\n\r\n\r\n///\r\n/// Mixin generate animation. It uses an additional function :\r\n/// - **map-get()**   - returns the value in a map associated with the given key. If the map doesnâ€™t have such a key, returns null;\r\n/// - **map-merge()** - Merges two maps together into a new map. Keys in $map2 will take precedence over keys in $map1;\r\n///\r\n/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#map_get-instance_method       map-get()\r\n/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#map_merge-instance_method     map-merge()\r\n///\r\n/// @name   mixinKeyframes\r\n///\r\n/// @param  {String}  $keyName - Animation Name\r\n/// @param  {Object}  $options\r\n///\r\n/// @example\r\n///   <selector> {\r\n///     @include moduleKeyframes(clockLeft,\r\n///       (\r\n///         opacityStart      : 0.8,\r\n///         opacityEnd        : 1,\r\n///         transformStart    : rotate(360deg)\r\n///       )\r\n///       ||\r\n///       (\r\n///         opacityStart      : 0.5,\r\n///         opacityEnd        : 1,\r\n///         transformDouble   : (rotate(-360deg) scale(0.5))\r\n///       )\r\n///     );\r\n///   }\r\n///\r\n@mixin mixinKeyframes($keyName, $options: ()) {\r\n  $configuration: map-merge((), $options);\r\n\r\n  @keyframes #{$keyName} {\r\n    from{\r\n      opacity   : map-get($configuration, opacityStart);\r\n      transform : map-get($configuration, transformStart);\r\n      transform : map-get($configuration, transformDouble);\r\n    }\r\n    to{\r\n      opacity   : map-get($configuration, opacityEnd);\r\n      transform : map-get($configuration, transformEnd);\r\n    }\r\n  }\r\n}\r\n\r\n///\r\n/// Mixin in mathematics, the gradient is a generalization of the usual concept of derivative of a function in one dimension to a function in several dimensions.\r\n///\r\n/// @name     mixinLinerGradient\r\n///\r\n/// @param    {Color}  $start_color  - Optional. The color of the shadow. Look at CSS Color Values for a complete list of possible color values;\r\n/// @param    {Color}  $end_color    - --//--\r\n///\r\n/// @link http://www.w3schools.com/cssref/css_colors_legal.asp  CSS Color Values\r\n///\r\n/// @see    $object\r\n///\r\n/// @example\r\n///   <selector> {\r\n///     @include mixinLinerGradient(#F00A1B, #FF0000);\r\n///     @include mixinLinerGradient($white, $black);\r\n///   }\r\n///\r\n@mixin mixinLinerGradient($start_color, $end_color){\r\n\tbackground: $start_color;\r\n\tbackground: -moz-linear-gradient(top,  rgba($start_color, 1) 0%, rgba($end_color, 1) 100%);\r\n\tbackground: -webkit-linear-gradient(top,  rgba($start_color, 1) 0%,rgba($end_color, 1) 100%);\r\n\tbackground: linear-gradient(to bottom,  rgba($start_color, 1) 0%,rgba($end_color, 1) 100%);\r\n\tfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#{$start_color}', endColorstr='#{$end_color}',GradientType=0 );\r\n}\r\n\r\n\r\n///\r\n/// Centered elements\r\n///\r\n@mixin centered {\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tleft: 50%;\r\n\ttransform: translate(-50%, -50%);\r\n}\r\n\r\n///\r\n/// Mixin media queries.\r\n///\r\n/// @name     respond-to\r\n///\r\n/// @param    {String}  $media [$text-mobile | $text-tablet | $text-small | $text-medium | $text-large] - Value that identifies one of the options and breakpoint.\r\n///\r\n/// @see      $object\r\n///\r\n/// @example\r\n///   <selector> {\r\n///     @include mixinRespond($text-mobile) { @content };\r\n///   }\r\n///   <selector> {\r\n///     @include mixinRespond($text-medium) { @content };\r\n///   }\r\n///\r\n//@mixin respond-to($media){\r\n//  @if ($media == 'extra-small') {\r\n//    @media screen and (max-width: 479px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'small'){\r\n//    @media screen and (min-width: 480px) and (max-width: 767px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'small-max') {\r\n//    @media screen and (max-width: 767px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'small-min') {\r\n//    @media screen and (min-width: 768px){\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'medium') {\r\n//    @media screen and (min-width: 768px) and (max-width: 991px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'medium-max') {\r\n//    @media screen and (max-width: 991px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'large-min') {\r\n//    @media screen and (min-width: 992px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'large') {\r\n//    @media screen and (min-width: 992px) and (max-width: 1199px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'large-max') {\r\n//    @media screen and (max-width: 1199px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'extra-large') {\r\n//    @media screen and (min-width: 1200px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'hard') {\r\n//    @media screen and (min-width: 992px) and (max-width: 1366px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media == 'hard-max') {\r\n//    @media screen and (max-width: 1366px) {\r\n//      @content\r\n//    }\r\n//  }\r\n//  @else if ($media != 'extra-small'  or $media != 'small' or\r\n//       $media != 'small-all'    or $media != 'medium' or\r\n//       $media != 'medium-all'   or $media != 'large' or\r\n//       $media != 'large-all'    or $media != 'extra-large') {\r\n//    @warn \"Unfortunately, no value could be retrieved from `#{$media}`. Please make sure it is defined...\";\r\n//  }\r\n//}\r\n\r\n\r\n$breakpoints: (\r\n\t'extra-small'   : \"(max-width: 479px)\",\r\n\r\n\t'small-max'     : \"(max-width: 767px)\",\r\n\t'small-min'     : \"(min-width: 300px)\",\r\n\t'small'         : \"(min-width: 480px) and (max-width: 767px)\",\r\n\r\n\t'medium-max'    : \"(max-width: 991px)\",\r\n\t'medium-min'    : \"(min-width: 768px)\",\r\n\t'medium'        : \"(min-width: 768px) and (max-width: 991px)\",\r\n\r\n\t'large-max'     : \"(max-width: 1199px)\",\r\n\t'large-min'     : \"(min-width: 992px)\",\r\n\t'large'         : \"(min-width: 992px) and (max-width: 1199px)\",\r\n\r\n\t'extra-large'   : \"(min-width: 1200px)\",\r\n\r\n\t'hard'          : \"(min-width: 992px) and (max-width: 1366px)\",\r\n\t'hard-max'      : \"(max-width: 1366px)\"\r\n) !default;\r\n\r\n@mixin respond-to($name) {\r\n\t// If the key exists in the map\r\n\t@if map-has-key($breakpoints, $name) {\r\n\t\t// Prints a media query based on the value\r\n\t\t@media screen and #{inspect(map-get($breakpoints, $name))} {\r\n\t\t\t@content;\r\n\t\t}\r\n\t}\r\n\t// If the key doesn't exist in the map\r\n\t@else {\r\n\t\t@warn \"Unfortunately, no value could be retrieved from `#{$breakpoint}`. Please make sure it is defined in `$breakpoints` map.\";\r\n\t}\r\n}\r\n"]}